library(fpp)
library(dplyr)
load("model mSD1.rda")
load("model mSD2.rda")
SD <- read.csv("Soft Drink Sales.csv")
SD <- SD %>%
mutate(STORE=as.factor(STORE),
LpX = log(pX),
LpY = log(pY),
DLpX = deal_X*LpX,
DLpY = deal_Y*LpY,
LSales = log(Sales_oz_X))
summary(mSD1)
summary(mSD2)
CV(mSD1)
CV(mSD2)
min(3.205782e-02,3.268963e-02)
min(-1.928711e+03,-1.918398e+03)
min(-1.902895e+03 ,-1.892582e+03 )
View(SD)
SD <- read.csv("Soft Drink Sales.csv")
SD <- SD %>%
mutate(STORE=as.factor(STORE),
LpX = log(pX),
LpY = log(pY),
DLpX = deal_X*LpX,
DLpY = deal_Y*LpY,
LSales = log(Sales_oz_X))
select.wsp <- function(x, store, prod, sw, ew){
xr <- x %>%
filter(STORE == store,
class == prod,
WEEK >= sw,
WEEK <= ew)
return(xr)
}
XL2 <- SD %>%
select.wsp(2,"reg",1,40)
summary(XL2)
XL3 <- SD %>%
select.wsp(2,"reg",41,52)
summary(XL2)
summary(XL3)
mean(XL2)
View(XL2)
XL2[,4:5]
mean(XL2[,4:5])
XL2[,mean(4:5)]
summary(XL2)
summary(XL3)
XL4 <- SD %>%
select.wsp(5,"lit",1,40)
summary(XL4)
XL5 <- SD %>%
select.wsp(5,"lit",41,52)
summary(XL5)
summary(XL4)
summary(XL5)
summary(XL4)
summary(XL4)
summary(XL5)
fitted.sales <- function(x,m){
Fit <- exp(forecast(m,newdata=x)$mean)
Sales <- x[,"Sales_oz_X"]
return(data.frame(Week=x[,"WEEK"], Sales=Sales, Fitted=Fit))
}
sqrt(mean((f.SD1[,"Sales"]-f.SD1[,"Fitted"])^2))
f.SD1 <- fitted.sales(XL2,mSD1)
sqrt(mean((f.SD1[,"Sales"]-f.SD1[,"Fitted"])^2))
View(fitted.sales)
f.SD1
f.SD2 <- fitted.sales(XL3,mSD1)
f.SD2
CV(f.SD1)
sqrt(mean((f.SD1[,"Sales"]-f.SD1[,"Fitted"])^2))
f.SD2 <- fitted.sales(XL3,mSD1)
f.SD2
sqrt(mean((f.SD2[,"Sales"]-f.SD2[,"Fitted"])^2))
f.SD3 <- fitted.sales(XL2,mSD2)
f.SD3
sqrt(mean((f.SD3[,"Sales"]-f.SD3[,"Fitted"])^2))
f.SD4 <- fitted.sales(XL3,mSD2)
f.SD4
sqrt(mean((f.SD4[,"Sales"]-f.SD4[,"Fitted"])^2))
X <- select.wsp(SD,1,"reg",1,40)
FS <- fitted.sales(X,mSD1)
Week <- FS[,"Week"]
Sales <- FS[,"Sales"]
Fitted <- FS[,"Fitted"]
newX <- select.wsp(SD,1,"reg",41,52)
Fcst <- fitted.sales(newX,mSD1)
FWeek <- Fcst[,"Week"]
N.Sales <- Fcst[,"Sales"]
F.Sales <- Fcst[,"Fitted"]
plot(Week,Sales, type="l", xlim=c(0,52), ylim=c(2000,45000),
main=paste("Store",1,"reg",substitute(mSD1)),
xlab="Weeks", ylab="Sales (oz)")
points(Week,Fitted, col="red", pch=20)
lines(FWeek,N.Sales, col="grey")
points(FWeek,F.Sales, col="blue", pch=20)
spm.fplot <- function(sn, pname, model){
xr <- x %>%
filter(STORE == sn,
PNAME == pname,
MODEL == model)
return(xr)
}
View(spm.fplot)
spm.fplot <- function(sn, pname, model){
xr <- x %>%
filter(STORE == sn,
PNAME == pname,
MODEL == model)
return(plot(xr))
}
spm.fplot(1,"lit",mSD1)
return((xr))
spm.fplot <- function(sn, pname, model){
xr <- x %>%
filter(STORE == sn,
PNAME == pname,
MODEL == model)
return((xr))
}
spm.fplot(1,"lit",mSD1)
library(fpp)
library(dplyr)
spm.fplot <- function(sn, pname, model){
xr <- x %>%
filter(STORE == sn,
PNAME == pname,
MODEL == model)
return((xr))
}
spm.fplot(1,"lit",mSD1)
library(fpp)
library(dplyr)
#
#Questions 1 and 2
load("model mSD1.rda")
load("model mSD2.rda")
#1
summary(mSD1)
summary(mSD2)
CV(mSD1)
CV(mSD2)
#2
#no code required
#
#Questions 3 and 4
SD <- read.csv("Soft Drink Sales.csv")
#
#Preprocess data
#
SD <- SD %>%
mutate(STORE=as.factor(STORE),
LpX = log(pX),
LpY = log(pY),
DLpX = deal_X*LpX,
DLpY = deal_Y*LpY,
LSales = log(Sales_oz_X))
#
# Function to extract a range of weeks of demand
#   for a given product and store
#
# Inputs:
#  x - data frame with combined data
#  store - store number(1 to 7) to extract
#  prod - product to extract: "lit" or "reg"
#  sw - first week to extract
#  ex - last week to extract
#
# Output:
#  reduced dataframe with only the store-week-product needed
#
select.wsp <- function(x, store, prod, sw, ew){
xr <- x %>%
filter(STORE == store,
class == prod,
WEEK >= sw,
WEEK <= ew)
return(xr)
}
#3
XL2 <- SD %>%
select.wsp(2,"reg",1,40)
summary(XL2)
XL3 <- SD %>%
select.wsp(2,"reg",41,52)
summary(XL3)
#4
XL4 <- SD %>%
select.wsp(5,"lit",1,40)
summary(XL4)
XL5 <- SD %>%
select.wsp(5,"lit",41,52)
summary(XL5)
#Questions 5 and 6
#
# Evaluate fitted values on the reduced store-product data set
#
# Inputs:
#  x - reduced data set (for a store-product over a week-range)
#  m - regression model object to obtain the fit
#
# Output:
#  data.frame with three columns:
#   Week - Week number
#   Sales - sales of product
#   Fit - fitted value of sales
#
fitted.sales <- function(x,m){
Fit <- exp(forecast(m,newdata=x)$mean)
Sales <- x[,"Sales_oz_X"]
return(data.frame(Week=x[,"WEEK"], Sales=Sales, Fitted=Fit))
}
#5
#in-sample fitted values
f.SD1 <- fitted.sales(XL2,mSD1)
f.SD1
#in-sample MSE
sqrt(mean((f.SD1[,"Sales"]-f.SD1[,"Fitted"])^2))
#out-of-sample fitted values
f.SD2 <- fitted.sales(XL3,mSD1)
f.SD2
#out-of-sample MSE
sqrt(mean((f.SD2[,"Sales"]-f.SD2[,"Fitted"])^2))
#6
#in-sample fitted values
f.SD3 <- fitted.sales(XL2,mSD2)
f.SD3
#in-sample MSE
sqrt(mean((f.SD3[,"Sales"]-f.SD3[,"Fitted"])^2))
#out-of-sample fitted values
f.SD4 <- fitted.sales(XL3,mSD2)
f.SD4
#out-of-sample MSE
sqrt(mean((f.SD4[,"Sales"]-f.SD4[,"Fitted"])^2))
#Questions 7 and 8
#
#
#
# Code to create forecasting plot for
# store #1 Regular ("reg") product
# using model mSD1
#
# First we select the data for store 1
# product "reg" over weeks 1-40
X <- select.wsp(SD,1,"reg",1,40)
#
# Next we calculate the fitted sales
# obtained by model mSD1 over weeks 1-40
FS <- fitted.sales(X,mSD1)
Week <- FS[,"Week"]
Sales <- FS[,"Sales"]
Fitted <- FS[,"Fitted"]
#
# Next select the OUT-OF SAMPLE data
# for the same store-product
newX <- select.wsp(SD,1,"reg",41,52)
#
# Calculate the out-of-sample forecasts
Fcst <- fitted.sales(newX,mSD1)
FWeek <- Fcst[,"Week"]
N.Sales <- Fcst[,"Sales"]
F.Sales <- Fcst[,"Fitted"]
#
# Render the Plot
plot(Week,Sales, type="l", xlim=c(0,52), ylim=c(2000,45000),
main=paste("Store",1,"reg",substitute(mSD1)),
xlab="Weeks", ylab="Sales (oz)")
points(Week,Fitted, col="red", pch=20)
lines(FWeek,N.Sales, col="grey")
points(FWeek,F.Sales, col="blue", pch=20)
#
#
spm.fplot <- function(sn, pname, model){
xr <- x %>%
filter(STORE == sn,
PNAME == pname,
MODEL == model)
return((xr))
}
spm.fplot(1,"lit",mSD1)
SD filter(
STORENM <- sn
PNAME <- pname
MODEL <- model
)
filter(
STORENM == sn
PNAME == pname
MODEL == model
)
spm.fplot <- function(sn, pname, model){
SD_new <- SD
filter(
STORENM == sn
PNAME == pname
MODEL == model
)
}
xr <- x %>%
filter(STORE == sn,
PRODUCT == pname,
MODEL == model)
xr <- SD %>%
filter(STORE == sn,
PRODUCT == pname,
MODEL == model)
spm.fplot <- function(sn, pname, model){
xr <- SD %>%
filter(STORE == sn,
PRODUCT == pname,
MODEL == model)
return(xr)
}
spm.fplot(1,"lit",mSD1)
View(XL2)
View(XL2)
View(XL2)
X <- select.wsp(SD,1,"reg",1,40)
FS <- fitted.sales(X,mSD1)
Week <- FS[,"Week"]
Sales <- FS[,"Sales"]
Fitted <- FS[,"Fitted"]
newX <- select.wsp(SD,1,"reg",41,52)
Fcst <- fitted.sales(newX,mSD1)
FWeek <- Fcst[,"Week"]
N.Sales <- Fcst[,"Sales"]
F.Sales <- Fcst[,"Fitted"]
plot(Week,Sales, type="l", xlim=c(0,52), ylim=c(2000,45000),
main=paste("Store",1,"reg",substitute(mSD1)),
xlab="Weeks", ylab="Sales (oz)")
points(Week,Fitted, col="red", pch=20)
lines(FWeek,N.Sales, col="grey")
points(FWeek,F.Sales, col="blue", pch=20)
f.SD1
sqrt(mean((f.SD1[,"Sales"]-f.SD1[,"Fitted"])^2))
f.SD2 <- fitted.sales(XL3,mSD1)
f.SD2
sqrt(mean((f.SD2[,"Sales"]-f.SD2[,"Fitted"])^2))
f.SD3 <- fitted.sales(XL2,mSD2)
f.SD3
sqrt(mean((f.SD3[,"Sales"]-f.SD3[,"Fitted"])^2))
f.SD4 <- fitted.sales(XL3,mSD2)
f.SD4
sqrt(mean((f.SD4[,"Sales"]-f.SD4[,"Fitted"])^2))
X <- select.wsp(SD,sn,pname,1,40)
spm.fplot <- function(sn, pname, model){
X <- select.wsp(SD,sn,pname,1,40)
}
spm.fplot <- function(sn, pname, model){
X <- select.wsp(SD,sn,pname,1,40)
FS <- fitted.sales(X, model)
Week <- FS[,"Week"]
Sales <- FS[,"Sales"]
Fitted <- FS[,"Fitted"]
newX <- select.wsp(SD,sn,pname,41,52)
Fcst <- fitted.sales(newX,model)
FWeek <- Fcst[,"Week"]
N.Sales <- Fcst[,"Sales"]
F.Sales <- Fcst[,"Fitted"]
plot(Week,Sales, type="l", xlim=c(0,52), ylim=c(2000,45000),
main=paste("Store",sn,pname,substitute(model)),
xlab="Weeks", ylab="Sales (oz)")
points(Week,Fitted, col="red", pch=20)
lines(FWeek,N.Sales, col="grey")
points(FWeek,F.Sales, col="blue", pch=20)
}
spm.fplot(1,"reg",mSD1)
spm.fplot(1,"reg",mSD2)
spm.fplot(5,"lit",mSd1)
spm.fplot(5,"lit",mSD1)
spm.fplot(5,"lit",mSD2)
spm.fplot(1,"reg",mSD1)
spm.fplot(1,"reg",mSD2)
spm.fplot(5,"lit",mSD1)
spm.fplot(5,"lit",mSD2)
SD.p <- sqrt(.54*(1-.54)/300)
SD.p
180/300
ts.z <- (.6 - .54)/SD.p
ts.z
ci.prop(.21, 200, .99)
install.packages("OOmisc")
library(OOmisc)
ci.prop(.21, 200, .99)
.21*200
ci.prop(42, 200, .99)
ci.prop(42, 200, .01)
ci.prop <- function(k, n, conf.level=0.95) {
critical.value <- qnorm(1 - (1 - conf.level) / 2)
p.hat <- k / n
standard.error <- sqrt(p.hat * (1 - p.hat) / n)
margin.of.error <- critical.value * standard.error
return(p.hat + c(-margin.of.error, margin.of.error))
}
ci.prop(42,200,.99)
.25*200
.21*200
ci.prop(.21,200,.99)
ci.prop <- function(k, n, conf.level=0.95) {
critical.value <- qnorm(1 - (1 - conf.level) / 2)
p.hat <- k / n
standard.error <- sqrt(p.hat * (1 - p.hat) / n)
margin.of.error <- critical.value * standard.error
return(p.hat + c(-margin.of.error, margin.of.error))
}
ci.prop(.21,200,.99)
detach("package:OOmisc", unload=TRUE)
ci.prop <- function(k, n, conf.level=0.95) {
critical.value <- qnorm(1 - (1 - conf.level) / 2)
p.hat <- k / n
standard.error <- sqrt(p.hat * (1 - p.hat) / n)
margin.of.error <- critical.value * standard.error
return(p.hat + c(-margin.of.error, margin.of.error))
}
.25*200
.21*200
ci.prop(.21,200,.99)
ci.prop(42,200,.99)
ci.prop(50,200,.99)
.24*250
ci.prop(60,250,.90)
SD.p <- sqrt(.5*(1-.5)/50)
SD.p
34/50
ts.z <- (.68 - .5)/SD.p
ts.z
pnorm(ts.z)
1- pnorm(ts.z)
.31*2692
ci.prop(834.52,2692,.95)
SD.p <- sqrt(.08*(1-.08)/418)
58/418
ts.z <- (.138756 - .08)/SD.p
ts.z
1- pnorm(ts.z)
pnorm(ts.z)
ztest.p <- function(k,n,p0) {
p.hat <- k/n
SD <- sqrt(p0*(1-p0)/n)
ts.z <- (p.hat - p0)/SD
p.val.lower <- pnorm(ts.z)
p.val.upper <- 1-pnorm(ts.z)
list(test.statistic=ts.z,
p.val.lower=p.val.lower,
p.val.upper=p.val.upper,
p.val.two=min(2*p.val.upper,2*p.val.lower)
)
}
8092*.37
ztest.p(2994.04, 8092,.36)
412/800
ci.prop(412, 800, .95)
20*.38
ztest.p(152,500,.25)
.22*123
ztest.p(27.06, 123,.26)
ztest.p(21, 25,.46)
